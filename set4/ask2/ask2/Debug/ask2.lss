
ask2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061b  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021f  00000000  00000000  00000d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000079  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	char input,A,B,C,D,F0,F1;
	DDRB=0xFF;		 // initialise PORTB as output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRA=0x00;		// initialise PORTA as input
  70:	1a ba       	out	0x1a, r1	; 26
	while(1)
	{
		input = PINA & 0x0F;	//input bits 0-3 from PORTA
  72:	29 b3       	in	r18, 0x19	; 25
		A = input & 0x01;			// A is bit 0
  74:	62 2f       	mov	r22, r18
  76:	61 70       	andi	r22, 0x01	; 1
		B = (input & 0x02) >> 1;	// B is bit 1, shift once
  78:	32 2f       	mov	r19, r18
  7a:	32 70       	andi	r19, 0x02	; 2
  7c:	43 2f       	mov	r20, r19
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	55 95       	asr	r21
  82:	47 95       	ror	r20
		C = (input & 0x04) >> 2;	// C is bit 2, shift twice
  84:	32 2f       	mov	r19, r18
  86:	34 70       	andi	r19, 0x04	; 4
  88:	83 2f       	mov	r24, r19
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	95 95       	asr	r25
  8e:	87 95       	ror	r24
  90:	95 95       	asr	r25
  92:	87 95       	ror	r24
		D = (input & 0x08) >> 3;	// D is bit 3, shift thrice
  94:	28 70       	andi	r18, 0x08	; 8
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	35 95       	asr	r19
  9a:	27 95       	ror	r18
  9c:	35 95       	asr	r19
  9e:	27 95       	ror	r18
  a0:	35 95       	asr	r19
  a2:	27 95       	ror	r18
		
		F0 = ~((A & B & ~C)|(C & D));	// calculate F0
  a4:	96 2f       	mov	r25, r22
  a6:	94 23       	and	r25, r20
  a8:	38 2f       	mov	r19, r24
  aa:	30 95       	com	r19
  ac:	39 23       	and	r19, r25
  ae:	52 2f       	mov	r21, r18
  b0:	58 23       	and	r21, r24
  b2:	35 2b       	or	r19, r21
  b4:	30 95       	com	r19
		F0 = F0 & 0x01;		// isolate bit 0
  b6:	31 70       	andi	r19, 0x01	; 1
		F1 = ((A | B) & (C | D));	// calculate F1
  b8:	96 2f       	mov	r25, r22
  ba:	94 2b       	or	r25, r20
  bc:	28 2b       	or	r18, r24
  be:	92 23       	and	r25, r18
		F1 = (F1 << 1) & 0x02;	// shift F1 once to the left and isolate bit 1
  c0:	89 2f       	mov	r24, r25
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	82 70       	andi	r24, 0x02	; 2
		
		PORTB = F1 | F0; // output at PORTB
  ca:	83 2b       	or	r24, r19
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	d1 cf       	rjmp	.-94     	; 0x72 <main+0x6>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
