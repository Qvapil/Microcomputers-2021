
ask3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000162  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005df  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055f  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000231  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e6  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

char x,input;

int main(void){
	
	DDRA = 0xFF;                     // Initialise PORTA as output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x00;      		  // Initialise PORTC as input
  80:	14 ba       	out	0x14, r1	; 20
	x = 1;         		         // Initialise x for
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	while(1){
		input=PINC;
  88:	83 b3       	in	r24, 0x13	; 19
  8a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <input>
		if(input == 1)               // SW0 is pressed
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	61 f4       	brne	.+24     	; 0xaa <main+0x2e>
		if(x == 128) x = 1;    // If 10000000 then 00000001 else
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	80 38       	cpi	r24, 0x80	; 128
  98:	21 f4       	brne	.+8      	; 0xa2 <main+0x26>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a0:	1d c0       	rjmp	.+58     	; 0xdc <main+0x60>
		else x = x << 1;       // Shift left once
  a2:	88 0f       	add	r24, r24
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	19 c0       	rjmp	.+50     	; 0xdc <main+0x60>
		else if(input == 2)          // SW1 is pressed
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	61 f4       	brne	.+24     	; 0xc6 <main+0x4a>
		if(x == 1) x = 128;    // If 00000001 then 10000000 else
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	21 f4       	brne	.+8      	; 0xbe <main+0x42>
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	0f c0       	rjmp	.+30     	; 0xdc <main+0x60>
		else x = x >> 1;       // Shift right once
  be:	86 95       	lsr	r24
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	0b c0       	rjmp	.+22     	; 0xdc <main+0x60>
		else if(input == 4)          // SW2 is pressed
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	21 f4       	brne	.+8      	; 0xd2 <main+0x56>
		x=128;                 // Led7 (MSB)
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	05 c0       	rjmp	.+10     	; 0xdc <main+0x60>
		else if(input == 8)          // SW3 is pressed
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	19 f4       	brne	.+6      	; 0xdc <main+0x60>
		x = 1;                 // Led0 (LSB)
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		while(PINC != 0);            // Wait until push-button is unpressed
  dc:	83 b3       	in	r24, 0x13	; 19
  de:	81 11       	cpse	r24, r1
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x60>
		PORTA = x;                   // Apply the change of the output
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e6:	8b bb       	out	0x1b, r24	; 27
	}
  e8:	cf cf       	rjmp	.-98     	; 0x88 <main+0xc>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
